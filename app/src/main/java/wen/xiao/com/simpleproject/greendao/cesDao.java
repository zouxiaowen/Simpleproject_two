package wen.xiao.com.simpleproject.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import wen.xiao.com.simpleproject.entity.ces;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CES".
*/
public class cesDao extends AbstractDao<ces, Long> {

    public static final String TABLENAME = "CES";

    /**
     * Properties of entity ces.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Test = new Property(1, String.class, "test", false, "TEST");
        public final static Property Image_url = new Property(2, String.class, "image_url", false, "IMAGE_URL");
    }


    public cesDao(DaoConfig config) {
        super(config);
    }
    
    public cesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"TEST\" TEXT," + // 1: test
                "\"IMAGE_URL\" TEXT);"); // 2: image_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ces entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String test = entity.getTest();
        if (test != null) {
            stmt.bindString(2, test);
        }
 
        String image_url = entity.getImage_url();
        if (image_url != null) {
            stmt.bindString(3, image_url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ces entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String test = entity.getTest();
        if (test != null) {
            stmt.bindString(2, test);
        }
 
        String image_url = entity.getImage_url();
        if (image_url != null) {
            stmt.bindString(3, image_url);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ces readEntity(Cursor cursor, int offset) {
        ces entity = new ces();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ces entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTest(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImage_url(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ces entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ces entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ces entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
